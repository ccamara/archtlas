<?php
define('PROIFLER_BUILDER_ACTIVE_CORE', '7');
define('PROFILER_BUILDER_TRUE_DEV', TRUE);
/**
 * Implements hook_permission().
 */
function profiler_builder_permission() {
    return array('administer profiler builder' => array(
    'title' => 'Administer profiler builder',
    'description' => 'Administer profiler builder',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function profiler_builder_menu() {
  $items = array();
  $items['admin/config/development/profiler_builder'] = array(
    'title' => 'Profiler Builder',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_profiler_builder_settings'),
    'description' => 'Build distribution files from current settings',
    'access arguments' => array('administer profiler builder'),
    'file' => 'profiler_builder.admin.inc',
  );
  return $items;
}

/**
 * Callback to build out list of features to be reverted.
 */
function _profiler_builder_list_features() {
  $system = array();
  $data = array();
  $system_features = array();
  // build the array we need
  $result = db_select('system', 's')
  ->fields('s', array('status', 'type', 'name', 'info'))
  ->condition('s.status', 1, '=')
  ->condition('s.type', 'module', '=')
  ->execute();
  foreach ($result as $val) {
    $system[$val->name] = unserialize($val->info);
  }
  // remove install profile as it lists as a module
  if (isset($system[variable_get('install_profile', 'standard')])) {
    unset($system[variable_get('install_profile', 'standard')]);
  }
  // allow modification to module build list
  drupal_alter('profiler_builder_modules_list', $system);
  // convert data
  foreach ($system as $module => $info) {
    //account for the other package in module listing
    if (!isset($info['package'])) {
      $info['package'] = 'Other';
    }
    $data[$info['package']][$module] = $info['version'];
  }
  // move features to the end if set to avoid conflicts
  if (isset($data['Features'])) {
    $system_features = $data['Features'];
    // features module can't be reverted
    unset($system_features['features']);
  }
  // return features if found
  return $system_features;
}

/**
 * Helper function to gather ignored values
 */
function _profiler_builder_ignore_list() {
  $ignore_list = array(
    'profiler_builder_codecache',
    'views_block_hashes',
    'drupal_private_key',
    'cache_content_flush_cache_page',
    'cache_content_flush_cache_block',
    'cache_flush_cache_update',
    'cron_key',
    'cron_last',
    'css_js_query_string',
    'email__active_tab',
    'install_profile',
    'install_task',
    'install_time',
    'menu_masks',
    'site_mail',
    'update_last_check',
    'wipe_rebuild',
    'update_notify_emails',
    'clean_url',
    'file_temporary_path',
    'ctools_last_cron',
    'node_cron_last',
    'user_admin_role',
    'theme_settings',
    'site_name',
    'site_slogan',
    'site_default_country',
    'page_compression',
    'cache',
    'cache_lifetime',
    'page_cache_maximum_age',
    'cdn_farfuture_unique_identifier_mapping',
    'cdn_basic_mapping',
    'cdn_mode',
    'isbn2node_isbndb_access_key',
    'rebuild',
    'recaptcha_private_key',
    'recaptcha_public_key',
    'recaptcha_theme',
    'reset_accesslog',
    'reset_counter',
    'save_continue_photo',
    'file_default_scheme',
    'file_directory_path',
    'file_public_path',
    'form_build_id_blog',
    'twitter_global_password',
    'wipe',
    'node_cron_views_scale',
    'features_codecache',
    'clear',
    'cache_flush_cache',
    'cache_flush_cache_block',
    'cache_flush_cache_field',
    'cache_flush_cache_filter',
    'cache_flush_cache_form',
    'cache_flush_cache_image',
    'cache_flush_cache_libraries',
    'cache_flush_cache_menu',
    'cache_flush_cache_page',
    'cache_flush_cache_path',
    'cache_flush_cache_views',
    'cache_flush_cache_views_data',
    'ldap_authentication_conf',
    'ldap_profile_conf',
    'ldap_servers_encryption',
    'ldap_servers_encrypt_key',
  );
  // allow modification via profiler_builder_ignore_alter
  drupal_alter('profiler_builder_ignore', $ignore_list);
  return $ignore_list;
}

/**
 * Implements hook_profiler_builder_modules_list_alter().
 */
function profiler_builder_profiler_builder_modules_list_alter(&$modules) {
  // remove developer modules from output
  foreach ($modules as $key => $project) {
    if ($project['package'] == 'Development') {
      unset($modules[$key]);
    }
  }
  // disable boost if enabled
  if (isset($modules['boost'])) {
    unset($modules['boost']);
  }
  // disable cdn if enabled
  if (isset($modules['cdn'])) {
    unset($modules['cdn']);
  }
}

/**
 * Implements hook_profiler_builder_variables_alter().
 */
function profiler_builder_profiler_builder_variables_alter(&$variables) {
  // variable values to change
  $change = array(
    'cdn_status' => 0,
  );
  // loop through and change only set values
  foreach ($change as $var => $val) {
    if (isset($variables[$var])) {
      $variables[$var] = $val;
    }
  }
}

/**
 * Helper for retrieving info from system table.
 */
function profiler_builder_get_info($name = 'standard') {
  // check if name is current profile
  if ($name == variable_get('install_profile', 'standard')) {
    return FALSE;
  }
  // return info about a single module / profile
  $result = db_select('system', 's')
    ->fields('s', array('name'))
    ->condition('s.status', 1, '=')
    ->condition('s.type', 'module', '=')
    ->condition('s.name', $name, '=')
    ->execute()
    ->fetchField();
  // if a name was returned then TRUE
  if (!empty($result)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Tar creation function from Features. Written by dmitrig01.
 *
 * @param $name
 *   Filename of the file to be tarred.
 * @param $contents
 *   String contents of the file.
 *
 * @return
 *   A string of the tar file contents.
 */
function profiler_builder_tar_create($name, $contents) {
  $tar = '';
  $binary_data_first = pack("a100a8a8a8a12A12",
    $name,
    '100644 ', // File permissions
    '   765 ', // UID,
    '   765 ', // GID,
    sprintf("%11s ", decoct(drupal_strlen($contents))), // Filesize,
    sprintf("%11s", decoct(REQUEST_TIME)) // Creation time
  );
  $binary_data_last = pack("a1a100a6a2a32a32a8a8a155a12", '', '', '', '', '', '', '', '', '', '');

  $checksum = 0;
  for ($i = 0; $i < 148; $i++) {
    $checksum += ord(drupal_substr($binary_data_first, $i, 1));
  }
  for ($i = 148; $i < 156; $i++) {
    $checksum += ord(' ');
  }
  for ($i = 156, $j = 0; $i < 512; $i++, $j++) {
    $checksum += ord(drupal_substr($binary_data_last, $j, 1));
  }

  $tar .= $binary_data_first;
  $tar .= pack("a8", sprintf("%6s ", decoct($checksum)));
  $tar .= $binary_data_last;

  $buffer = str_split($contents, 512);
  foreach ($buffer as $item) {
    $tar .= pack("a512", $item);
  }
  return $tar;
}

/**
 * Callback to get a list of all special profiler includes.
 */
function _profiler_builder_get_includes() {
  $includes = module_invoke_all('profiler_builder_info_include');
  drupal_alter('profiler_builder_info_include', $includes);
  return $includes;
}

/**
 * Implements hook_profiler_builder_info_include().
 */
function profiler_builder_profiler_builder_info_include() {
  $includes = array(
    'modules' => array(
      'name' => t('Dependencies'),
      'callback' => '_profiler_builder_export_dependencies',
    ),
    'variables' => array(
      'name' => t('Variables'),
      'callback' => '_profiler_builder_export_variables',
    ),
  );
  return $includes;
}

/**
 * Callback to build out dependencies portion of .info file.
 */
function _profiler_builder_export_dependencies() {
  $system = array();
  $data = array();
  $output = '';
  // build the array we need
  $result = db_select('system', 's')
  ->fields('s', array('status', 'type', 'name', 'info'))
  ->condition('s.status', 1, '=')
  ->condition('s.type', 'module', '=')
  ->execute();
  foreach ($result as $val) {
    $system[$val->name] = unserialize($val->info);
  }
  // remove install profile as it lists as a module
  if (isset($system[variable_get('install_profile', 'standard')])) {
    unset($system[variable_get('install_profile', 'standard')]);
  }
  // build the make file project data with everything
  foreach ($system as $module => $info) {
    //account for the other package in module listing
    if (!isset($info['package'])) {
      $info['package'] = 'Other';
    }
  }
  // allow modification to module build list
  drupal_alter('profiler_builder_modules_list', $system);
  // convert data
  foreach ($system as $module => $info) {
    //account for the other package in module listing
    if (!isset($info['package'])) {
      $info['package'] = 'Other';
    }
    $data[$info['package']][$module] = $info['version'];
  }
  // alphabetical order of modules / packages
  ksort($data);
  foreach ($data as $key => $package) {
    ksort($data[$key]);
  }
  // move features to the end if set to avoid conflicts
  if (isset($data['Features'])) {
    $tmp = $data['Features'];
    unset($data['Features']);
    $data['Features'] = $tmp;
    // move features module ahead of features themselves
    $tmp = array('features' => $data['Features']['features']);
    $data['Features'] = array_merge($tmp, $data['Features']);
  }
  // info file of required modules
  foreach ($data as $package => $projects) {
    $output .= "; $package\n";
    foreach ($projects as $project => $version) {
      $output .= "dependencies[] = $project\n";
    }
  }
  return $output;
}

/**
 * Callback to build out variables portion of .info file.
 */
function _profiler_builder_export_variables() {
  $output = '';
  // array of values we know to ignore automatically
  $ignore_list = _profiler_builder_ignore_list();
  // ignore list as well as all theme settings
  $result = db_select('variable', 'v')
  ->fields('v', array('name'))
  ->condition('v.name', $ignore_list, 'NOT IN')
  ->condition('v.name', 'theme_%_settings', 'NOT LIKE')
  ->condition('v.name', 'color_%', 'NOT LIKE')
  ->execute();
  // loop through and build values array
  foreach ($result as $value) {
    // ignore NULL values
    if (variable_get($value->name, '') != '') {
      $vals[$value->name] = variable_get($value->name, '');
    }
  }
  // allow for overriding of variable values
  drupal_alter('profiler_builder_variables', $vals);
  // loop through and rebuild array values
  foreach ($vals as $var_name => $val) {
    if (is_array($val)) {
      foreach ($val as $key => $ary_val) {
        if (is_array($ary_val)) {
          foreach ($ary_val as $key2 => $ary_val2) {
            if (is_array($ary_val2)) {
              foreach ($ary_val2 as $key3 => $ary_val3) {
                if (is_array($ary_val3)) {
                  foreach ($ary_val3 as $key4 => $ary_val4) {
                    $output .= 'variables[' . $var_name . '][' . $key . '][' . $key2 . '][' . $key3 . '][' . $key4 . '] = ' . var_export($ary_val4, TRUE) . "\n";
                  }
                }
                else {
                  $output .= 'variables[' . $var_name . '][' . $key . '][' . $key2 . '][' . $key3 . '] = ' . var_export($ary_val3, TRUE) . "\n";
                }
              }
            }
            else {
              $output .= 'variables[' . $var_name . '][' . $key . '][' . $key2 . '] = ' . var_export($ary_val2, TRUE) . "\n";
            }
          }
        }
        else {
          // ensure this isn't an object
          if (is_object($ary_val)) {
            drupal_set_message(t("The variable '@name' could not be evaluated. Please add it manually if it is needed.", array('@name' => $var_name . ' - ' . $key)), 'error');
          }
          else {
            $output .= 'variables[' . $var_name . '][' . $key . '] = ' . var_export($ary_val, TRUE) . "\n";
          }
        }
      }
    }
    else {
      // ensure this isn't an object
      if (is_object($val)) {
        drupal_set_message(t("The variable '@name' could not be evaluated. Please add it manually if it is needed.", array('@name' => $var_name)), 'error');
      }
      else {
        $output .= 'variables[' . $var_name . '] = ' . var_export($val, TRUE) . "\n";
      }
    }
  }
  return $output;
}

/**
 * Implements hook_profiler_builder_patch_locations().
 */
function profiler_builder_profiler_builder_patch_locations() {
  // find active site's configuration path
  $conf = conf_path() . '/';
  // define locations
  $locations = array(
    'includes',
    'misc',
    'modules',
    'profiles',
    'scripts',
    'sites/all',
    $conf . 'modules',
    $conf . 'themes',
    $conf . 'libraries',
    'themes',
  );
  return $locations;
}

/**
 * Helper function to convert version syntax.
 */
function _profiler_builder_get_version($version) {
  // replace active core number
  $version = str_replace(PROIFLER_BUILDER_ACTIVE_CORE . '.x-', '', $version);
  // use true dev instead of specific build
  if (PROFILER_BUILDER_TRUE_DEV && strpos($version, '-dev')) {
    $version = drupal_substr($version, 0, (strpos($version, '.')+1)) . 'x-dev';
  }
  return $version;
}